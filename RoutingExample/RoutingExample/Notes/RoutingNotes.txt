 ROUTING 

		  //  invoking the corresponding endpoint based on the http method and url is called as Routing;

		  //  is. in asp.net core it is accomplished with two individual methods that is "use routing" and"use endpoints"
		  	.you would like to invoke them in thesame order.
		  	 that is first "use routing" and after that only "use endpoints".


		UseRouting(): 
					enables routing.
					select an approriate end point(middleware) based on url path and Http method.

		UseEndPoints():
					 Executes the approriate end point(middleware) baesd on thr endpoint selected by the above Use Routing.


					At the time of compilation all the endpoints are defined and stored in comipled source code.
					Based on incoming req. appropriate endpoints get selected, using UseRouting() and then get executed Using, UseEndpoints() mehtod.

				 ** Creates End Points using Map* methods

				 ** URL after the port no. is called, path.

				 **  whenever a middleware executed based on the routing it is called endpoint.

 	  Map() :-

 				// this is being said by default the "map" endpoint executes for either of "get", "post";or any other http
 					 method may be "put" or "delete" or "patch", or any other type of http method.

					app.UseRouting();

					 app.UseEndpoints( endpoints =>{

					 		endpoint.Map("URL", async (context) =>{

					 			await context.Response.......
					 		});
					 });

						Here we require to pass the Lambda expression that contains the argument "endpoints". And add your endpoints using Map* methods.

						 In map* method we require to pass the arguments one is incoming request "URL" or "/URL" , and then provide the reqest delegate () =>, means a middleware. that receive the "context" as argument.

						 Similarlly for MapGET and MapPost

 *** NOTE:   Map method runs for all Http methods like GET, PUT, POST, DELETE , etc  ***


 	GetEndpoint(); :
 						// when you want to investigate which endpoint in matched , then this method is used.

 						// It is used always after UseRouting() method.

							app.Use(async (context, next) =>{
							   Microsoft.AspNetCore.Http.Endpoint? endPoint = context.GetEndpoint();
									  if (endPoint != null)
									  {
									     await context.Response.WriteAsync($"Map Endpoint: {endPoint.DisplayName}");
									    }
								    await next(context);
								});


   Route Parameters :-
					// parts of URL which can be vary are called route parameters

				/file/{filename}.{extension} --> here "file" and "." is literal text(fixed value) and { } are the route parameters can be vary and ready to accept any value.

				/employee/profile/john  <---> /employee/profile/{}

					// route param. are ready to accept any value at run time.

					// Case insensitive

				Programtically we are able to read the values of route parameters using,

			  context.Resquest.RouteValues[" "];

			  	this is the object type must be converted into string or any other to store. Convert.ToString()

			 endpoint.Map("files/{filename}.{extension}", async context =>
				{
				    string? filename = Convert.ToString(context.Request.RouteValues["filename"]);
				    string? extension = Convert.ToString(context.Request.RouteValues["extension"]);
				    await context.Response.WriteAsync($"in files: {filename} . {extension}");
				});






	Default Parameter :

						endpoint.Map("files/{filename=sample}.{extension}", async context =>

						endpoint.Map("product/details/{id=1}", async context =>

					//here above "sample" and "1" is the default value for the url in the middleware/endpoint doesnt matches.
 					// there should be not nay space in the url
					// if we dont supply any route values then it, automatically takes the default values.

 	Optional Parameter :

 					// you can check whether the value for the "route value"(parameters) is supplied or not.

 					// if we dont supply any route values then it, automatically takes the null value

 					// if value is not supplied then we can return the "null". instead of a "Default parameter"

 					// we can do it so by, suffix ?
 					  like -->  /{id?} in the URL

 					  endpoint.Map("class/rollno/{roll?}", async context =>

 	Route Constraints: 

 					//  this will add the restriction to the route values supplied in the URL.

 					//	constraints is added first and deafault value at last.

 					//  can add multuple constraints using :constatint_name1:constraint_name 2




 						int : matches with any integer.  {id:int}

 						bool : matches with true or false , case in-sensitive.
 						  	{active:bool}

 						datetime : matches with with valid formats "yyyy-MM-dd hh:mm:ss tt" and "MM/dd/yyyy hh:ss tt"
 							{id:datetime}

 						decimal : matches with valid decimal value.
 							{price:decimal}

 						long : matches with valid long value.
 							{id:long}

 						guid : matches with valid Guid value.- hexadecimal number
 							{id:guid}, eg. 123E467-E89B........

 						Guid includes a random value with the time stamps including the milliseconds.

 						minlength(value) : matches with a string that has at least specified number of characters. 
 							{username:minlength(4)}

 						maxlength(value) : matches with a string that has less than or equal to specified number of characters. 
 							{username:maxlength(7)}

 						length(min,max) : matches with a string that has "number of characters" /b/w given min. and max. length (both numbers including)
 							{username:length(4,8)}

 						length(value) : matches with a string that has exactly specified number of characters. 
 						{projectname:length(9)}-

 						min(value) : matches with an integer value greater than or 
 							equal to the specified value.
 							{age:min(18)}  matches with 18,19,20

 						max(value) : matches with an integer value less than or equal to the specified value.
 						{age:max(100)}  matches with 18,1,9,-1,100

 						range(min,max) : matches with an integer value b/w the specified min and max values (both no. included).
 						{age:range(18,30)}  matches with 18,19,30

 						alpha : matches with a string that contains only alphabet(A-Z) and (a-z).
 						{username:alpha} 

 						regex :
 								start with ^ and end with $

 								{month:regex(^apr|jul|oct|dec$)}

 								{age:regex(^[0-9]{2}$)} --> matches with 2 digit no.

 								{age:regex(^\d{2}-\d{3}$)} --> matches with 2 digit no. then hyphen - matches with 3 digit no

 	Custom Constraint :-
 						  //  it is used when we want to use a complex constraints more than once in a program
 						  //	user defined custom
 						  //  in this we have to create a class for the constraint which we want to make it custom constraint
 						  // then, first we have to implement IRouteConstraint interface, using quick implements
 						  //  then creat the constraint using the Regex class i.e 
 						  Regex regex = new (routeKey)

 						  //  after that to do the actual route , we have to add the constraint to the builder so that builder can recognize the constraint bcoz it is custom constaint we have to register it,using
 						  using projectname.namespace //add the namespcare here

 						  builder.Services.AddRouting(option =>
							{
							    option.ConstraintMap.Add("months", typeof (MonthCustomConstraint));
							});

							// here "months" is the constrait name like int, long ,etc and typeof is Class name of constraint
						   //  at last use this constraint where ever you want to use like --> :months

	Endpoint Selection Order :
							  // 1: URL template with more segments.

									Eg: "a/b/c/d" is higher than "a/b/c".

								2: URL template with literal text has more precedence than a parameter segment.

									Eg: "a/b" is higher than "a/{parameter}".

								3: URL template that has a parameter segment with constraints has more precedence than a parameter segment without constraints.

									Eg: "a/b:int" is higher than "a/b".

								4: Catch-all parameters (**).

									Eg: "a/{b}" is higher than "a/**".
